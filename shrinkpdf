#!/bin/bash    
####################################################################################################
#
#   shrinkpdf - a Bash script which attempts to reduce the size of a PDF file with GhostScript.
#
####################################################################################################
#
#   (C) Copyright 2021 RafaÅ‚ M. Siejakowski.
#   Homepage: rs-math.net
#
#   This program is licensed under the BSD 3-Clause License.
#   Redistribution and use in source and binary forms, with or without modification, 
#   are permitted provided that the following conditions are met:
#   
#   1. Redistributions of source code must retain the above copyright notice, 
#      this list of conditions and the following disclaimer.
#   
#   2. Redistributions in binary form must reproduce the above copyright notice,
#      this list of conditions and the following disclaimer in the documentation and/or other
#      materials provided with the distribution.
#   
#   3. Neither the name of the copyright holder nor the names of its contributors may be used 
#      to endorse or promote products derived from this software without specific 
#      prior written permission.
#   
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
#   EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
#   SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
#   OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#   OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
####################################################################################################
#
#   Function definitions
#
####################################################################################################
### die()
# Print the message ($1) and exit with error
die() 
{
    echo -e "$1"
    exit -1
}
### check_dependency()
# Checks whether the utility program ($1) is found in $PATH
# and terminates the script if not
check_dependency()
{
	local q=`which $1 2>/dev/null`
	[[ "x${q:0:1}" == "x/" ]] || die "Error: utility program $1 not found on the system."
}
### warn_if_exists()
# Checks whether the file ($1) exists (output overwrite protection).
warn_if_exists()
{ 
    if [[ -f "$1" ]]
    then
        echo -n "File $1 exists. Overwrite? [y/N]: "
        read answer
        if [ "x${answer:0:1}" != "xy" ]
        then
            exit
        fi
    fi
}
### print_help()
# Prints help information
print_help()
{
	echo -e "\nshrinkpdf - a Bash script which attempts to reduce the size of a PDF file with GhostScript\n"
	echo -e "Usage:\n\tshrinkpdf <INPUT> <OUTPUT>"
	echo -e "where <INPUT> is an input PDF (or PostScript) file and <OUTPUT> is the desired output PDF.\n"
	echo -e "Given the above arguments, shrinkpdf will attempt to use GhostScript (gs) to reduce the size"
	echo -e "of the input file without compromising its quality. This is accomplished via lossless compression"
	echo -e "of images in the input file, de-duplicating fonts and images, and also by introducing a more"
	echo -e "efficient internal organization of the PDF. However, if the input PDF is already highly compressed"
	echo -e "or efficiently structured, then shrinkpdf may not be able to further reduce its file size."
	echo -e "In such case, shrinkpdf will print a suitable message to stdout. In any case, the input file is"
	echo -e "not modified; onle the <OUTPUT> is written to."
}
### get_filesize()
# Returns the size of a file in bytes or -1 if file doesn't exist.
# Arguments:
# $1 -	filename
get_filesize()
{
	if [[ -f "$1" ]]
	then
		local duline=$(du -b "$1")
		local duwords=( $duline )
		echo "${duwords[0]}"
	else
		echo '-1'
	fi
}
####################################################################################################
#
#   Entry point
#
####################################################################################################
#
# Check if dependencies are present:
check_dependency "gs"
check_dependency "du"
check_dependency "bc"
# 
# Validate input and output parameters
OUTFILE="$2"
INFILE="$1"
if [[ "x${INFILE}" == "x" ]]
then
	die "	Usage: $0 input.pdf output.pdf"
elif [[ "$INFILE" == "--help" ]]
then
	print_help
	exit
fi
[[ -f "${INFILE}" ]] || die "Error: input file '${INFILE}' not found"
warn_if_exists "$OUTFILE"
# Run main processing command
gs -o "$OUTFILE"                            \
    -sDEVICE=pdfwrite                       \
    -dAntiAliasColorImage=false             \
    -dAntiAliasGrayImage=false              \
    -dAntiAliasMonoImage=false              \
    -dAutoFilterColorImages=false           \
    -dAutoFilterGrayImages=false            \
    -dDownsampleColorImages=false           \
    -dDownsampleGrayImages=false            \
    -dDownsampleMonoImages=false            \
    -dColorConversionStrategy=/LeaveColorUnchanged    \
    -dConvertCMYKImagesToRGB=false          \
    -dConvertImagesToIndexed=false          \
    -dUCRandBGInfo=/Preserve                \
    -dPreserveHalftoneInfo=true             \
    -dPreserveOPIComments=true              \
    -dPreserveOverprintSettings=true        \
    -dEncodeColorImages=true                \
    -dEncodeGrayImages=true                 \
    -dEncodeMonoImages=true                 \
    -dSubsetFonts=true                      \
    -dCompressFonts=true                    \
    -dDetectDuplicateImages=true            \
    -f "$INFILE" 1>/dev/null 2>/dev/null
if [[ $? -ne 0 ]]
then
	die "Ghostscript error; output file may be corrupted."
fi
# File has been processed correctly
in_size=$(get_filesize "$INFILE")
out_size=$(get_filesize "$OUTFILE")
if [[ $in_size -gt $out_size ]]
then # size reduction achieved
	percentage=$(echo "scale=1; 100*($in_size - $out_size)/$in_size" | bc)
	echo "Reduced file size by ${percentage}%, from ${in_size} to ${out_size} bytes."
else
	echo "Processing failed to reduce the size of the PDF file. You may just as well use the original file '${INFILE}'."
fi

# ===================================================================
#
# Done!

